name: Build and Publish PowerShell Module

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
          fetch-depth: 0

      # - name: Setup PowerShell
      #   uses: actions/setup-powershell@v2

      - name: Install required modules
        shell: pwsh
        run: |
          Install-Module -Name PowerShellGet -Force -Scope CurrentUser
          Install-Module -Name Az.Synapse    -Force -Scope CurrentUser
          Install-Module -Name Az.Storage    -Force -Scope CurrentUser

      # - name: Azure Login (Service Principal)
      #   shell: pwsh
      #   env:
      #     AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      #     AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      #     AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      #   run: |
      #     Connect-AzAccount `
      #       -ServicePrincipal `
      #       -Tenant $env:AZURE_TENANT_ID `
      #       -ApplicationId $env:AZURE_CLIENT_ID `
      #       -Credential (New-Object System.Management.Automation.PSCredential($env:AZURE_CLIENT_ID, (ConvertTo-SecureString $env:AZURE_CLIENT_SECRET -AsPlainText -Force)))

      # - name: Run Pester tests
      #   shell: pwsh
      #   run: |
      #     if (Test-Path ./test) {
      #       Invoke-Pester -Path ./test
      #     }

      - name: Build module artifact
        shell: pwsh
        run: |

          $moduleManifest = Get-ChildItem -Path . -Filter '*.psd1' -Recurse | Select-Object -First 1
          $moduleName = $moduleManifest.BaseName
          $artifactPath = "$env:GITHUB_WORKSPACE/artifact"

          # Build NuGet package (.nupkg) for the PowerShell module
          New-Item -ItemType Directory -Path $artifactPath -Force | Out-Null
          #Publish-Module -Path $moduleManifest.Directory.FullName -NuGetApiKey 'AnyValue' -Repository 'LocalRepo' -Force -SkipAutomaticTags -WhatIf
          #$nupkgFile = Get-ChildItem -Path "$env:USERPROFILE/.local/share/powershell/Modules" -Filter '*.nupkg' -Recurse | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          #if ($nupkgFile) {
          #  Copy-Item -Path $nupkgFile.FullName -Destination $artifactPath
          #}
          Copy-Item -Path "$($moduleManifest.Directory.FullName)\*.psm1" -Destination $artifactPath
          Copy-Item -Path "$($moduleManifest.FullName)" -Destination $artifactPath
          Copy-Item -Path "$($moduleManifest.Directory.FullName)\public" -Destination "$artifactPath\$moduleName\public" -Recurse
          Copy-Item -Path "$($moduleManifest.Directory.FullName)\private" -Destination "$artifactPath\$moduleName\private" -Recurse
          Get-ChildItem -Path "$artifactPath\$moduleName" -Recurse

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: powershell-module
          path: "$env:GITHUB_WORKSPACE/artifact/$moduleName"

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: powershell-module
          path: ./module

      - name: Publish to PSGallery
        env:
          NUGET_API_KEY: ${{ secrets.PSGALLERY_API_KEY }}
        run: |
          Resolve-Path "."
          Publish-Module -Path /home/runner/work/azure.synapse.tools/azure.synapse.tools/module -NuGetApiKey $env:NUGET_API_KEY -Repository PSGallery -Force
        shell: pwsh